group 'org.apache.cassandra'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

// Take the application out once we're running via Cassandra
mainClassName = "com.netflix.distributed_task_executor.DistributedTaskExecutor"
applicationName = 'distributedTaskExecutor'

// Config file location should be in file:/// format for local files,
// when we have the fix for adding /conf directory to classpaht, we can get away with below default JvmArg
def confFile = "file:" + File.separator + File.separator + "$projectDir/conf/distributed_task_executor.yaml"
applicationDefaultJvmArgs = ["-distributed_task_executor.logdir=./logs",
                             "-Dcassandra.distributed_task_executor.config=" + confFile]

sourceSets {
    // This is needed as gradle considers `src/main/resources` as the default resources folder
    main {
        resources {
            srcDirs = ['conf', 'setup']
        }
    }
    integTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('conf/*')
        resources {
            srcDirs += [main.resources, 'setup']
        }
        compileClasspath += main.output + main.resources
        runtimeClasspath += main.output + main.resources
    }
    test {
        resources {
            srcDirs = [main.resources]
        }
    }
}

configurations {
    integTestCompile.extendsFrom testCompile
    integTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile(group: 'com.sparkjava', name: 'spark-core', version: '2.7.2') {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }

    // Trying to be exactly compatible with Cassandra's deps
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'ch.qos.logback:logback-core:1.2.3'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'com.datastax.cassandra:cassandra-driver-core:3.4+'

    // Maybe we shouldn't do this?
    compile 'org.apache.cassandra:cassandra-all:3.11.2'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.cassandraunit', name: 'cassandra-unit-shaded', version: '3.3.0.2'
    testCompile 'com.datastax.cassandra:cassandra-driver-core:3.4+:tests'
    testCompile 'org.apache.commons:commons-exec:1.3+'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

}

task copyCodeStyle(type: Copy) {
    from "ide/idea/codeStyleSettings.xml"
    into ".idea"
}

// Lets copy the distributions from build/install directory to /bin and /lib
// directories to be aligned with C* distribution format
task copyDist(type: Copy) {
    from "$buildDir/install/$applicationName"
    into "$projectDir"
}

task setupCCM(type: Exec) {
    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        println "You are running on a Mac! We need some additional setup"
        println ".. attempting to create aliases to lo0 on 127.0.1.1..3"
        if (!file("/etc/sudoers.d/ifconfig").exists()) {
            println "FAIL: Cannot find /etc/sudoers.d/ifconfig which is needed so that we can setup the ip aliases required by CCM for integration tests"
            println "Please run the following command before attempting to run DistributedTaskExecutor tests on Mac"
            println 'sudo sh -c \'echo "${SUDO_USER} ALL=(ALL) NOPASSWD: /sbin/ifconfig" > /etc/sudoers.d/ifconfig\''
            assert false
        }
        (1..3).each { i ->
            exec {
                executable "sudo"
                args "ifconfig", "lo0", "alias", "127.0.1.${i}"
            }
        }
    }

    exec {
        executable "virtualenv"
        args "ccm-venv"
    }
    commandLine "$projectDir/ccm-venv/bin/pip", 'install', 'ccm'
}

task integTest(type: Test) {
    description 'Runs the integration tests.'
    testClassesDir = project.sourceSets.integTest.output.classesDir
    classpath = project.sourceSets.integTest.runtimeClasspath

    environment "PATH", "$projectDir/ccm-venv/bin" + System.getProperty("path.separator") + "$System.env.PATH"
    forkEvery = 1
    afterTest { desc, result ->
        logger.quiet "Executed test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

integTest.dependsOn setupCCM

// Lets clean /bin and /lib directories along with default build directories.
clean {
    println "Deleting directory $projectDir/bin"
    delete "$projectDir/bin"
    println "Deleting directory $projectDir/lib"
    delete "$projectDir/lib"
}

// copyDist gets called on every build
copyDist.dependsOn installDist
build.dependsOn copyDist
